; Enable Zend OPcache extension module
zend_extension=opcache.so

; Determines if Zend OPCache is enabled
opcache.enable=${OPCACHE_ENABLE}

; Determines if Zend OPCache is enabled for the CLI version of PHP
opcache.enable_cli=${OPCACHE_ENABLE_CLI}

; The OPcache shared memory storage size.
opcache.memory_consumption=${OPCACHE_MEMORY_CONSUMPTION}

; The maximum number of keys (scripts) in the OPcache hash table.
; Only numbers between 200 and 1000000 are allowed.
opcache.max_accelerated_files=${OPCACHE_MAX_FILES}

; How often (in seconds) to check file timestamps for changes to the shared
; memory storage allocation. ("1" means validate once per second, but only
; once per request. "0" means always validate)
opcache.revalidate_freq=${OPCACHE_REVALIDATE_FREQ}

; The amount of memory for interned strings in Mbytes.
opcache.interned_strings_buffer=${OPCACHE_INTERNED_STRINGS_BUFFER}

; Specifies a PHP script that is going to be compiled and executed at server
; start-up.
; https://php.net/opcache.preload
opcache.preload=${OPCACHE_PRELOAD}

; Preloading code as root is not allowed for security reasons. This directive
; facilitates to let the preloading to be run as another user.
; https://php.net/opcache.preload_user
opcache.preload_user=${OPCACHE_PRELOAD_USER}

; OPcache error_log file name. Empty string assumes "stderr".
opcache.error_log=/dev/stderr

; For typical usage, this option accepts one of four string values:
; 
;     - disable: Completely disabled, cannot be enabled at runtime.
;     - off: Disabled, but can be enabled at runtime.
;     - tracing/on: Use tracing JIT. Enabled by default and recommended for most users.
;     - function: Use function JIT.
; 
; For advanced usage, this option accepts a 4-digit integer CRTO, where the digits mean:
; 
; C (CPU-specific optimization flags)
;     - 0: Disable CPU-specific optimization.
;     - 1: Enable use of AVX, if the CPU supports it.
; R (register allocation)
;     - 0: Don't perform register allocation.
;     - 1: Perform block-local register allocation.
;     - 2: Perform global register allocation.
; T (trigger)
;     - 0: Compile all functions on script load.
;     - 1: Compile functions on first execution.
;     - 2: Profile functions on first request and compile the hottest functions afterwards.
;     - 3: Profile on the fly and compile hot functions.
;     - 4: Currently unused.
;     - 5: Use tracing JIT. Profile on the fly and compile traces for hot code segments.
; O (optimization level)
;     - 0: No JIT.
;     - 1: Minimal JIT (call standard VM handlers).
;     - 2: Inline VM handlers.
;     - 3: Use type inference.
;     - 4: Use call graph.
;     - 5: Optimize whole script.
; 
; The "tracing" mode corresponds to CRTO = 1254, the "function" mode corresponds to CRTO = 1205.
opcache.jit=${OPCACHE_JIT}

; The amount of shared memory to reserve for compiled JIT code. A zero value disables the JIT.
opcache.jit_buffer_size=${OPCACHE_JIT_BUFFER}

; A bit mask specifying which JIT debug output to enable. For possible values, please consult zend_jit.h.
opcache.jit_debug=${OPCACHE_JIT_DEBUG}

; The maximum percentage of "wasted" memory until a restart is scheduled.
opcache.max_wasted_percentage=${OPCACHE_MAX_WASTED_PERCENTAGE}

; When this directive is enabled, the OPcache appends the current working
; directory to the script key, thus eliminating possible collisions between
; files with the same name (basename). Disabling the directive improves
; performance, but may break existing applications.
;opcache.use_cwd=1

; When disabled, you must reset the OPcache manually or restart the
; webserver for changes to the filesystem to take effect.
;opcache.validate_timestamps=1

; Enables or disables file search in include_path optimization
;opcache.revalidate_path=0

; If disabled, all PHPDoc comments are dropped from the code to reduce the
; size of the optimized code.
;opcache.save_comments=1

; If enabled, a fast shutdown sequence is used for the accelerated code
; Depending on the used Memory Manager this may cause some incompatibilities.
opcache.fast_shutdown=${OPCACHE_FAST_SHUTDOWN}

; Allow file existence override (file_exists, etc.) performance feature.
;opcache.enable_file_override=0

; A bitmask, where each bit enables or disables the appropriate OPcache
; passes
;opcache.optimization_level=0xffffffff

;opcache.inherited_hack=1
;opcache.dups_fix=0

; The location of the OPcache blacklist file (wildcards allowed).
; Each OPcache blacklist file is a text file that holds the names of files
; that should not be accelerated. The file format is to add each filename
; to a new line. The filename may be a full path or just a file prefix
; (i.e., /var/www/x  blacklists all the files and directories in /var/www
; that start with 'x'). Line starting with a ; are ignored (comments).
;opcache.blacklist_filename=

; Allows exclusion of large files from being cached. By default all files
; are cached.
;opcache.max_file_size=0

; Check the cache checksum each N requests.
; The default value of "0" means that the checks are disabled.
;opcache.consistency_checks=0

; How long to wait (in seconds) for a scheduled restart to begin if the cache
; is not being accessed.
;opcache.force_restart_timeout=180

; All OPcache errors go to the Web server log.
; By default, only fatal errors (level 0) or errors (level 1) are logged.
; You can also enable warnings (level 2), info messages (level 3) or
; debug messages (level 4).
;opcache.log_verbosity_level=1

; Preferred Shared Memory back-end. Leave empty and let the system decide.
;opcache.preferred_memory_model=

; Protect the shared memory from unexpected writing during script execution.
; Useful for internal debugging only.
;opcache.protect_memory=0

; Allows calling OPcache API functions only from PHP scripts which path is
; started from specified string. The default "" means no restriction
;opcache.restrict_api=

; Mapping base of shared memory segments (for Windows only). All the PHP
; processes have to map shared memory into the same address space. This
; directive allows to manually fix the "Unable to reattach to base address"
; errors.
;opcache.mmap_base=

; Facilitates multiple OPcache instances per user (for Windows only). All PHP
; processes with the same cache ID and user share an OPcache instance.
;opcache.cache_id=

; Enables and sets the second level cache directory.
; It should improve performance when SHM memory is full, at server restart or
; SHM reset. The default "" disables file based caching.
opcache.file_cache=/tmp/sessions/opcache

; Enables or disables opcode caching in shared memory.
;opcache.file_cache_only=0

; Enables or disables checksum validation when script loaded from file cache.
;opcache.file_cache_consistency_checks=1

; Implies opcache.file_cache_only=1 for a certain process that failed to
; reattach to the shared memory (for Windows only). Explicitly enabled file
; cache is required.
;opcache.file_cache_fallback=1

; Enables or disables copying of PHP code (text segment) into HUGE PAGES.
; This should improve performance, but requires appropriate OS configuration.
;opcache.huge_code_pages=1

; Validate cached file permissions.
;opcache.validate_permission=0

; Prevent name collisions in chroot'ed environment.
;opcache.validate_root=0

; If specified, it produces opcode dumps for debugging different stages of
; optimizations.
;opcache.opt_debug_level=0

; Prevents caching files that are less than this number of seconds old. It
; protects from caching of incompletely updated files. In case all file updates
; on your site are atomic, you may increase performance by setting it to "0".
;opcache.file_update_protection=2

; Absolute path used to store shared lockfiles (for *nix only).
;opcache.lockfile_path=/tmp
